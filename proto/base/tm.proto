syntax = "proto3";
package cosmos.base.tendermint.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/doggystylez/interstellar-proto/query/base";

// Service defines the gRPC querier service for tendermint queries.
service Service {
  // GetNodeInfo queries the current node info.
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse) {}
}

message GetNodeInfoRequest {}

// GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method.
message GetNodeInfoResponse {
  DefaultNodeInfo default_node_info = 1;
  VersionInfo application_version = 2;
}

// VersionInfo is the type for the GetNodeInfoResponse message.
message VersionInfo {
  string name = 1;
  string app_name = 2;
  string version = 3;
  string git_commit = 4;
  string build_tags = 5;
  string go_version = 6;
  repeated Module build_deps = 7;
  // Since: cosmos-sdk 0.43
  string cosmos_sdk_version = 8;
}

// Module is the type for VersionInfo
message Module {
  // module path
  string path = 1;
  // module version
  string version = 2;
  // checksum
  string sum = 3;
}

message DefaultNodeInfo {
  ProtocolVersion protocol_version = 1 [(gogoproto.nullable) = false];
  string default_node_id = 2 [(gogoproto.customname) = "DefaultNodeID"];
  string listen_addr = 3;
  string network = 4;
  string version = 5;
  bytes channels = 6;
  string moniker = 7;
  DefaultNodeInfoOther other = 8 [(gogoproto.nullable) = false];
}

message ProtocolVersion {
  uint64 p2p = 1 [(gogoproto.customname) = "P2P"];
  uint64 block = 2;
  uint64 app = 3;
}

message DefaultNodeInfoOther {
  string tx_index = 1;
  string rpc_address = 2 [(gogoproto.customname) = "RPCAddress"];
}
