syntax = "proto3";
package cosmos.tx.v1beta1;

import "amino/amino.proto";
import "cosmos/crypto/multisig/v1beta1/multisig.proto";
import "cosmos/tx/signing/v1beta1/signing.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "proto/balance/coin.proto";

option go_package = "github.com/doggystylez/interstellar-proto/tx";

// Service defines a gRPC service for interacting with transactions.
service Service {
  rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {}

  // GetTx fetches a tx by hash.
  rpc GetTx(GetTxRequest) returns (GetTxResponse) {}
}

message BroadcastTxRequest {
  // tx_bytes is the raw transaction.
  bytes tx_bytes = 1;
  BroadcastMode mode = 2;
}

// BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
// method.
enum BroadcastMode {
  // zero-value for mode ordering
  BROADCAST_MODE_UNSPECIFIED = 0;
  // DEPRECATED: use BROADCAST_MODE_SYNC instead,
  // BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
  BROADCAST_MODE_BLOCK = 1 [deprecated = true];
  // BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits
  // for a CheckTx execution response only.
  BROADCAST_MODE_SYNC = 2;
  // BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client
  // returns immediately.
  BROADCAST_MODE_ASYNC = 3;
}

// BroadcastTxResponse is the response type for the
// Service.BroadcastTx method.
message BroadcastTxResponse {
  // tx_response is the queried TxResponses.
  TxResponse tx_response = 1;
}

// GetTxRequest is the request type for the Service.GetTx
// RPC method.
message GetTxRequest {
  // hash is the tx hash to query, encoded as a hex string.
  string hash = 1;
}

// GetTxResponse is the response type for the Service.GetTx method.
message GetTxResponse {
  // tx is the queried transaction.
  cosmos.tx.v1beta1.Tx tx = 1;
  // tx_response is the queried TxResponses.
  TxResponse tx_response = 2;
}

// Tx is the standard type used for broadcasting transactions.
message Tx {
  // body is the processable content of the transaction
  TxBody body = 1;

  // auth_info is the authorization related content of the transaction,
  // specifically signers, signer modes and fee
  AuthInfo auth_info = 2;

  // signatures is a list of signatures that matches the length and order of
  // AuthInfo's signer_infos to allow connecting signature meta information like
  // public key and signing mode by position.
  repeated bytes signatures = 3;
}

// TxRaw is a variant of Tx that pins the signer's exact binary representation
// of body and auth_info. This is used for signing, broadcasting and
// verification. The binary `serialize(tx: TxRaw)` is stored in Tendermint and
// the hash `sha256(serialize(tx: TxRaw))` becomes the "txhash", commonly used
// as the transaction ID.
message TxRaw {
  // body_bytes is a protobuf serialization of a TxBody that matches the
  // representation in SignDoc.
  bytes body_bytes = 1;

  // auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
  // representation in SignDoc.
  bytes auth_info_bytes = 2;

  // signatures is a list of signatures that matches the length and order of
  // AuthInfo's signer_infos to allow connecting signature meta information like
  // public key and signing mode by position.
  repeated bytes signatures = 3;
}

// SignDoc is the type used for generating sign bytes for SIGN_MODE_DIRECT.
message SignDoc {
  // body_bytes is protobuf serialization of a TxBody that matches the
  // representation in TxRaw.
  bytes body_bytes = 1;

  // auth_info_bytes is a protobuf serialization of an AuthInfo that matches the
  // representation in TxRaw.
  bytes auth_info_bytes = 2;

  // chain_id is the unique identifier of the chain this transaction targets.
  // It prevents signed transactions from being used on another chain by an
  // attacker
  string chain_id = 3;

  // account_number is the account number of the account in state
  uint64 account_number = 4;
}

// SignDocDirectAux is the type used for generating sign bytes for
// SIGN_MODE_DIRECT_AUX.
//
// Since: cosmos-sdk 0.46
message SignDocDirectAux {
  // body_bytes is protobuf serialization of a TxBody that matches the
  // representation in TxRaw.
  bytes body_bytes = 1;

  // public_key is the public key of the signing account.
  google.protobuf.Any public_key = 2;

  // chain_id is the identifier of the chain this transaction targets.
  // It prevents signed transactions from being used on another chain by an
  // attacker.
  string chain_id = 3;

  // account_number is the account number of the account in state.
  uint64 account_number = 4;

  // sequence is the sequence number of the signing account.
  uint64 sequence = 5;

  // Tip is the optional tip used for transactions fees paid in another denom.
  // It should be left empty if the signer is not the tipper for this
  // transaction.
  //
  // This field is ignored if the chain didn't enable tips, i.e. didn't add the
  // `TipDecorator` in its posthandler.
  Tip tip = 6;
}

// TxBody is the body of a transaction that all signers sign over.
message TxBody {
  // messages is a list of messages to be executed. The required signers of
  // those messages define the number and order of elements in AuthInfo's
  // signer_infos and Tx's signatures. Each required signer address is added to
  // the list only the first time it occurs.
  // By convention, the first required signer (usually from the first message)
  // is referred to as the primary signer and pays the fee for the whole
  // transaction.
  repeated google.protobuf.Any messages = 1;

  // memo is any arbitrary note/comment to be added to the transaction.
  // WARNING: in clients, any publicly exposed text should not be called memo,
  // but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
  string memo = 2;

  // timeout is the block height after which this transaction will not
  // be processed by the chain
  uint64 timeout_height = 3;

  // extension_options are arbitrary options that can be added by chains
  // when the default options are not sufficient. If any of these are present
  // and can't be handled, the transaction will be rejected
  repeated google.protobuf.Any extension_options = 1023;

  // extension_options are arbitrary options that can be added by chains
  // when the default options are not sufficient. If any of these are present
  // and can't be handled, they will be ignored
  repeated google.protobuf.Any non_critical_extension_options = 2047;
}

// AuthInfo describes the fee and signer modes that are used to sign a
// transaction.
message AuthInfo {
  // signer_infos defines the signing modes for the required signers. The number
  // and order of elements must match the required signers from TxBody's
  // messages. The first element is the primary signer and the one which pays
  // the fee.
  repeated SignerInfo signer_infos = 1;

  // Fee is the fee and gas limit for the transaction. The first signer is the
  // primary signer and the one which pays the fee. The fee can be calculated
  // based on the cost of evaluating the body and doing signature verification
  // of the signers. This can be estimated via simulation.
  Fee fee = 2;

  // Tip is the optional tip used for transactions fees paid in another denom.
  //
  // This field is ignored if the chain didn't enable tips, i.e. didn't add the
  // `TipDecorator` in its posthandler.
  //
  // Since: cosmos-sdk 0.46
  Tip tip = 3;
}

// SignerInfo describes the public key and signing mode of a single top-level
// signer.
message SignerInfo {
  // public_key is the public key of the signer. It is optional for accounts
  // that already exist in state. If unset, the verifier can use the required \
  // signer address for this position and lookup the public key.
  google.protobuf.Any public_key = 1;

  // mode_info describes the signing mode of the signer and is a nested
  // structure to support nested multisig pubkey's
  ModeInfo mode_info = 2;

  // sequence is the sequence of the account, which describes the
  // number of committed transactions signed by a given address. It is used to
  // prevent replay attacks.
  uint64 sequence = 3;
}

// ModeInfo describes the signing mode of a single or nested multisig signer.
message ModeInfo {
  // sum is the oneof that specifies whether this represents a single or nested
  // multisig signer
  oneof sum {
    // single represents a single signer
    Single single = 1;

    // multi represents a nested multisig signer
    Multi multi = 2;
  }

  // Single is the mode info for a single signer. It is structured as a message
  // to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
  // future
  message Single {
    // mode is the signing mode of the single signer
    cosmos.tx.signing.v1beta1.SignMode mode = 1;
  }

  // Multi is the mode info for a multisig public key
  message Multi {
    // bitarray specifies which keys within the multisig are signing
    cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1;

    // mode_infos is the corresponding modes of the signers of the multisig
    // which could include nested multisig public keys
    repeated ModeInfo mode_infos = 2;
  }
}

// Fee includes the amount of coins paid in fees and the maximum
// gas to be used by the transaction. The ratio yields an effective "gasprice",
// which must be above some miminum to be accepted into the mempool.
message Fee {
  // amount is the amount of coins to be paid as a fee
  // repeated cosmos.base.v1beta1.Coin amount = 1 [
  repeated balance.Coin amount = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/doggystylez/interstellar-proto/balance.Coins",
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins"
  ];

  // gas_limit is the maximum gas that can be used in transaction processing
  // before an out of gas error occurs
  uint64 gas_limit = 2;

  // if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
  // the payer must be a tx signer (and thus have signed this field in AuthInfo).
  // setting this field does *not* change the ordering of required signers for the transaction.
  string payer = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
  // to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
  // not support fee grants, this will fail
  string granter = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Tip is the tip used for meta-transactions.
//
// Since: cosmos-sdk 0.46
message Tip {
  // amount is the amount of the tip
  //  repeated cosmos.base.v1beta1.Coin amount = 1 [
  repeated balance.Coin amount = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/doggystylez/interstellar-proto/balance.Coins",
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins"
  ];
  // tipper is the address of the account paying for the tip
  string tipper = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
// tipper) builds and sends to the fee payer (who will build and broadcast the
// actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
// by the node if sent directly as-is.
//
// Since: cosmos-sdk 0.46
message AuxSignerData {
  // address is the bech32-encoded address of the auxiliary signer. If using
  // AuxSignerData across different chains, the bech32 prefix of the target
  // chain (where the final transaction is broadcasted) should be used.
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
  // signs. Note: we use the same sign doc even if we're signing with
  // LEGACY_AMINO_JSON.
  SignDocDirectAux sign_doc = 2;
  // mode is the signing mode of the single signer.
  cosmos.tx.signing.v1beta1.SignMode mode = 3;
  // sig is the signature of the sign doc.
  bytes sig = 4;
}

// TxResponse defines a structure containing relevant tx data and metadata. The
// tags are stringified and the log is JSON decoded.
message TxResponse {
  option (gogoproto.goproto_getters) = false;
  // The block height
  int64 height = 1;
  // The transaction hash.
  string tx_hash = 2; //[(gogoproto.customname) = "TxHash"];
  // Namespace for the Code
  string codespace = 3;
  // Response code.
  uint32 code = 4;
  // Result bytes, if any.
  string data = 5;
  // The output of the application's logger (raw string). May be
  // non-deterministic.
  string raw_log = 6;
  // The output of the application's logger (typed). May be non-deterministic.
  repeated ABCIMessageLog logs = 7 [
    (gogoproto.castrepeated) = "ABCIMessageLogs",
    (gogoproto.nullable) = false
  ];
  // Additional information. May be non-deterministic.
  string info = 8;
  // Amount of gas requested for transaction.
  int64 gas_wanted = 9;
  // Amount of gas consumed by transaction.
  int64 gas_used = 10;
  // The request transaction bytes.
  google.protobuf.Any tx = 11;
  // Time of the previous block. For heights > 1, it's the weighted median of
  // the timestamps of the valid votes in the block.LastCommit. For height == 1,
  // it's genesis time.
  string timestamp = 12;
  // Events defines all the events emitted by processing a transaction. Note,
  // these events include those emitted by processing all the messages and those
  // emitted from the ante. Whereas Logs contains the events, with
  // additional metadata, emitted only by processing the messages.
  //
  // Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
  Event events = 13 [(gogoproto.nullable) = false];
}

// ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
message ABCIMessageLog {
  option (gogoproto.stringer) = true;

  uint32 msg_index = 1 [(gogoproto.jsontag) = "msg_index"];
  string log = 2;

  // Events contains a slice of Event objects that were emitted during some
  // execution.
  repeated StringEvent events = 3 [
    (gogoproto.castrepeated) = "StringEvents",
    (gogoproto.nullable) = false
  ];
}

// StringEvent defines en Event object wrapper where all the attributes
// contain key/value pairs that are strings instead of raw bytes.
message StringEvent {
  option (gogoproto.stringer) = true;

  string type = 1;
  repeated Attribute attributes = 2 [(gogoproto.nullable) = false];
}

// Attribute defines an attribute wrapper where the key and value are
// strings instead of raw bytes.
message Attribute {
  string key = 1;
  string value = 2;
}

// Event allows application developers to attach additional information to
// ResponseFinalizeBlock and ResponseCheckTx.
// Later, transactions may be queried using these events.
message Event {
  string type = 1;
  repeated EventAttribute attributes = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "attributes,omitempty"
  ];
}

// EventAttribute is a single key-value pair, associated with an event.
message EventAttribute {
  string key = 1;
  string value = 2;
  bool index = 3; // nondeterministic
}
